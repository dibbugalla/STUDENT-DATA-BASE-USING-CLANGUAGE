#include"header.h"
int main(){
sll *headptr=0;
int c,op;
while(1){
printf("enter the option\n");
printf("1)add_begin\n2)add_middle\n3)add_end\n4)print_data\n5)count_students\n6)save_file\n7)read_file\n8)reverse_print\n9)delete_all\n10)delete_student\n11)search_student\n12)sort_data13)exit\n\n");
scanf("%d",&op);
switch(op){
case 1:add_begin(&headptr);break;
case 2:add_middle(&headptr);break;
case 3:add_end(&headptr);break;
case 4:print_node(headptr);break;
case 5:c=count_node(headptr);printf("total count=%d\n",c);break;
case 6:save_file(headptr);break;
case 7:read_file(&headptr);break;
case 8:reverse_print(headptr);break;
case 9:delete_all(&headptr);break;
case 10:delete_node(&headptr);break;
case 11:searach_node(headptr); break;
case 12:sort_node(headptr);break;
case 13:exit(0);break;
}}}
void add_begin(sll **ptr){
sll *new;
new=malloc(sizeof(sll));
printf("enter the rollno name marks\n");
scanf("%d%s%f",&new->rollno,new->name,&new->marks);
new->next=*ptr;
*ptr=new;
}

int add_middle(sll **ptr){
sll *new,*last;
new=malloc(sizeof(sll));
printf("enter the rollno name marks\n");
scanf("%d%s%f",&new->rollno,new->name,&new->marks);
if(*ptr==0 || new->rollno < (*ptr)->rollno){
new->next=*ptr;
*ptr=new;
}
else{
last=*ptr;
while((last->next!=0)&&(new->rollno > last->next->rollno)){
last=last->next;
new->next=last->next;
last->next=new;
}
}
}
void add_end(sll **ptr){
sll *new,*last;
new=malloc(sizeof(sll));
printf("enter the rollno name marks\n");
scanf("%d%s%f",&new->rollno,new->name,&new->marks);
new->next=0;
if(*ptr==0)
*ptr=new;
else{
last=*ptr;
while(last->next)
last=last->next;
last->next=new;
}
}

void save_file(sll *ptr){
if(ptr==0){
printf("no data is present\n");
return ;
}
FILE *fp;
fp=fopen("data.txt","w");
while(ptr){
fprintf(fp,"%d %s %f",ptr->rollno,ptr->name,ptr->marks);
ptr=ptr->next;
}
fclose(fp);
}

void read_file(sll **ptr){
FILE *fp;
fp=fopen("data.txt","r");
if(fp==0){
printf("no data is present\n");
return ;
}
sll *new,*last;
new=malloc(sizeof(sll));
while(1){
if(fscanf(fp,"%d%s%f",&new->rollno,new->name,&new->marks)==-1)
break;
new->next=0;
if(*ptr==0)
*ptr=new;
else{
last=*ptr;
while(last->next)
last=last->next;
last->next=new;
}
}
}
void reverse_print(sll *ptr){
if(ptr==0){
printf("no record is available\n");
return ;
}
sll *temp=ptr;
int i,j,c;
c=count_node(ptr);
for(i=0;i<c-1;i++){
temp=ptr;
for(j=0;j<c-i-1;j++){
temp=temp->next;
printf("%d %s %f\n",temp->rollno,temp->name,temp->marks);
}
}
}
void delete_all(sll **ptr){
if(*ptr==0){
printf("no record is available\n");
return ;
}
int c=1;
sll *del=*ptr;
while(del){
*ptr=del->next;
free(del);
sleep(1);
printf("node %d deleted \n",c++);
del=*ptr;
}
}
void sort_node(sll *ptr){
sll *p1=ptr,*p2,temp;
int i,j,c=count_node(ptr);
for(i=0;i<c-1;i++){
p2=p1->next;
for(j=0;j<c-i-1;j++){
if(p1->rollno>p2->rollno){
temp.rollno=p1->rollno;
strcmp(temp.name,p1->name);
temp.marks=p1->marks;
p1->rollno=p2->rollno;
strcpy(p1->name,p2->name);
p1->marks=p2->marks;
p2->rollno=temp.rollno;
strcpy(p2->name,temp.name);
p2->marks=temp.marks;
}
p2=p2->next;
}
p1=p1->next;
}
}
void searach_node(sll *ptr){
if(ptr==0){
printf("no record is present\n");
return ;
}
int num;
printf("enter the rollno to search\n");
scanf("%d",&num);
while(ptr){
if(ptr->rollno==num){
printf("%d %s %f\n",ptr->rollno,ptr->name,ptr->marks);
return ;
}
ptr=ptr->next;
}
printf("rollno is not found in data base\n");
}

void print_node(sll *ptr){
if(ptr==0){
printf("no record is present\n");
return ;
}
/*FILE  *fp;
char ch;
fp=fopen("data.exe","r");
while((ch=fgetc(fp))){
fprintf("%c",ch);
*/
if(ptr){
printf("%d %s %f\n",ptr->rollno,ptr->name,ptr->marks);
if(ptr->next!=0)
print_node(ptr->next);
}
}


int count_node(sll *ptr){
int c=0;
while(ptr){
c++;
ptr=ptr->next;
}
return c;
}

void delete_node(sll **ptr){
if(*ptr==0){
printf("no record is present\n");
return ;
}
char name[100];
printf("enetr the name to delete\n");
scanf("%[^\n]",name);
sll *del=*ptr,*prev;
while(del){
if(strcmp(name,del->name)==0)
if(del==*ptr){
*ptr=del->next;
}
else{
prev->next=del->next;
free(del);
return ;
}
prev=del;
del=del->next;
}
printf("name notÂ found\n");
}
